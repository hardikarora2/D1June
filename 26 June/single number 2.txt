
import java.util.*;

class Main{
	public static void main(String[] args){
		Solution ob = new Solution();
		Scanner sc=new Scanner(System.in);
		int t=sc.nextInt();
		while(t-->0){
			int n=sc.nextInt();
			int []nums=new int[n];
            for(int i=0;i<n;i++){
                nums[i]=sc.nextInt();
            }
            int[] ans=ob.singleNumber(nums);
            System.out.println(Math.min(ans[0],ans[1])+" "+Math.max(ans[1],ans[0]));
		}
			
	}
}


class Solution {
    public int[] singleNumber(int[] nums) {
        // Your Code Here
		int xorall = 0;
		int n = nums.length;
		for(int i=0; i<n; i++)
			xorall^= nums[i];

		// if you take the xor of 2 equal numbers 
		// a^a (a is any variable)
		// a^a = 0;
		// a^0 = a;

		// sn1 ^ sn2
		
		// find the uncommon bit 
		int cpy = xorall;
		int bit_pos = -1;
		int temp = 0;
		while(cpy>0)
		{
			if((cpy & 1) != 0)
				bit_pos = temp;

			cpy>>=1; // right shift
			temp++;
		}

		// bit_pos will the uncommon bit 
		// you have that bit which is present in one(sn1) and not present in another one(sn2)

		int ans[] = new int[2];

		// 0th index will store the ones which the common bit 
		//1 st index will store the ones which do not have the common bit 

		for(int i=0; i<n; i++)
		{
			if((nums[i] & (1<<bit_pos))!= 0)
				ans[0]^= nums[i];
			else
				ans[1]^= nums[i];
		}
		return ans;

    }
}