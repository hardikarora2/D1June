import java.util.*;

class Solution{
	static int ans ;
	static int dirx[] = {0,+1,0,-1};
	static int diry[] = {+1,0,-1,0};
	public static void dfs(int[][] grid, int countz, boolean [][]vis, int x, int y)
	{
		// System.out.println(x + " " + y);
		if(grid[x][y]==2)
		{
			if(countz==-1)
				ans++;
			return ;
		}
		for(int i=0; i<4; i++)
		{
			int nx = x + dirx[i];
			int ny = y + diry[i];

			if(nx>=0 && ny>=0 && nx<grid.length && ny<grid[0].length && vis[nx][ny] == false )
			{
				if(grid[nx][ny] == 0 || grid[nx][ny] == 2)
				{
					vis[nx][ny] = true;
					dfs(grid,countz-1,vis,nx,ny);
					vis[nx][ny] = false;
				}
			}
			
		}
		return ;
	}
    public static int UniquePaths3(int n,int m,int[][] grid){
        //write code here
		int stx = -1,sty = -1;
		int countz = 0;
		for(int i=0;i<n;++i)
		{
            for(int j=0;j<m;++j)
			{
				if(grid[i][j] ==1)
				{
					stx = i;
					sty = j;
				}
				if(grid[i][j] ==0)
					countz++;
			}
		}
		// System.out.println(countz);
		ans = 0;
		boolean vis[][] = new boolean[n][m];
		vis[stx][sty] = true;
		dfs(grid,countz,vis,stx,sty);

		return ans;
    }
}

public class Main {
    public static void main(String[] args) throws Throwable {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] grid = new int[n][m];
        for(int i=0;i<n;++i){
            for(int j=0;j<m;++j){
                grid[i][j]=sc.nextInt();
            }
        }
        Solution obj = new Solution();
        int ans = obj.UniquePaths3(n,m,grid);
        System.out.println(ans);
    }
}